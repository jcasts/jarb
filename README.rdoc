= JarbClass

* http://yaksnrainbows.com

== Description

A study of Ruby through an attempt at creating a Ruby-like javascript class structure. Supports the following features:
* Class reopening
* Embedding classes / Namespacing
* Inheritance
* Class inclusion and object extending
* Public, protected, and private method definition.
* Dynamic method lookup.

== Examples
    
First, let's define the following:
    var debug_method = 'console.log("METHOD CALLED: "+(this.name || this.id)+":"+arguments.callee.name)';

Simple class definition:
    $class("Item", function(){
      this.def("thing", new Function(debug_method));
      
      $a.this_is_an_instance_attribute;
      
      def("initialize", function(name){
        this.name = name;
        this.this_is_an_instance_attribute = "something";
      });
      
      def("run_test", new Function(debug_method));
    });
    
    item = Item.new("test name");
    item.id;                      //=> "Item:1234-123456789"
    item.name;                    //=> "test name"
    item.run_test();              //=> "METHOD CALLED: Item:1234-123456789:run_test"
    item.is_a(Item);              //=> true
    item.class();                 //=> [Item function]
    item.class().thing();         //=> "METHOD CALLED: Item:thing"


Class inclusion:
    $class("Resource", function(){
    
      $include(Item);
      
      def("test", function(){
        this.run_test();
      });
      
      $private();
      
      def("private_method",  new Function(debug_method));
    
    });
    
    r = Resource.new();
    r.test();                 //=> "METHOD CALLED: Resource:1234-123456789:run_test"
    r.private_method()        //=> Attempted to call private method 'private_method' from [window]
    r.send("private_method"); //=> "METHOD CALLED: Resource:1234-123456789:private_method"
    
    
Other expressions of inclusion:
    Resource.include(Item);           // Equivalent to calling $include(Item) in the class definition
    Resource.prototype.extend(Item);  // Equivalent to Resource.include(Item)
    Resource.new().extend(Item);      // Will extend only the unique Resource instance


Embedding classes or namespacing:
    $class("Resource", function(){
    
      $class("ResultSet", function(){
        
        this.def("listings", new Function(debug_method));
        
        $private();
        
        this.def("class_private", new Function(debug_method));
        
        def("test_private", new Function(debug_method));
        
      });
      
    });
    
    ResultSet;            //=> ReferenceError: ResultSet is not defined
    Resource.ResultSet;   //=> [ResultSet function]


Class inheritance and the super() method:
    $class("Business"['<'](Resource), function(){
  
      this.def("find", function(){
        this.super();
        console.log("find from Business");
      });
  
      def("run_test", function(){
        console.log("ran tests from Business");
        this.super();
      });
  
      def("test", function(){
        console.log("test from Business");
        this.super();
      });
  
    });
    
    Business.superclass();  //=> [Resource function]
    b = Business.new();
    b.test();               //=> "test from Business"
                            //=> "ran tests from Business"
                            //=> "METHOD CALLED: Business:1234-123456789:run_test"

Note: the super() method can take explicit arguments as well.
    